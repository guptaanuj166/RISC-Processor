library std;
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity ALU is
  port (in_a : in std_logic_vector(15 downto 0); in_b : in std_logic_vector(15 downto 0);
	--ALU operations: 00 - ADD, 01 - SUB, 10 - NAND
	alu_op : in std_logic_vector(1 downto 0);
	alu_c : out std_logic_vector(15 downto 0);
	carry : out std_logic;
	zero : out std_logic
	);
end entity ALU;

architecture alu of ALU is

	signal negative_a : std_logic_vector(15 downto 0);
	signal negative_b : std_logic_vector(15 downto 0);
	signal alu_c_sig : std_logic_vector(15 downto 0);
	signal carry_when_pos : std_logic;
	signal carry_when_neg : std_logic;
	signal neg_add : std_logic_vector(15 downto 0);

begin

	negative_a <= std_logic_vector(unsigned(not (in_a)) + 1);
	negative_b <= std_logic_vector(unsigned(not (in_b)) + 1);

	process(in_a, in_b, alu_op)
	begin 
		if alu_op = "10" then 
			alu_c_sig <= in_a nand in_b;
			neg_add <= "0000000000000000";
		end if;
		if alu_op = "01" then 
			alu_c_sig <= std_logic_vector(unsigned(in_a) + unsigned(negative_b));
			neg_add <= std_logic_vector(unsigned(negative_a) + unsigned(in_b));
		end if;
		if alu_op = "00" then 
			alu_c_sig <= std_logic_vector(unsigned(in_a) + unsigned(in_b));
			neg_add <= std_logic_vector(unsigned(negative_a) + unsigned(negative_b));
		end if;
	end process;

	alu_c <= alu_c_sig;
	zero <= '1' when alu_c_sig = "0000000000000000" else '0';

	carry_when_pos <= '1' when in_a(15) = '0' and in_b(15) = '0' and in_a(14 downto 0) > alu_c_sig(14 downto 0)
	else '0';
	carry_when_neg <= '1' when in_a(15) = '1' and in_b(15) = '1' and negative_a(14 downto 0) > neg_add(14 downto 0)
	else '0';
	carry <= carry_when_neg or carry_when_pos;

end architecture alu;